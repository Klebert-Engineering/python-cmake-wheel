#!/usr/bin/env python3
import os, sys, platform
import zipfile
import subprocess
import re
from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext
from distutils.command.bdist import bdist as _bdist
from distutils.command.sdist import sdist as _sdist
from distutils.command.install_lib import install_lib as _install_lib

dist_dir = '@WHEEL_DEPLOY_DIRECTORY@'
build_temp = '@CMAKE_BINARY_DIR@'
lib_dir = '@WHEEL_LIB_DIR@'

if not os.path.exists(dist_dir):
    os.makedirs(dist_dir, exist_ok=True)

class CMakeExtension(Extension):
    def __init__(self, name, **kwa):
        Extension.__init__(self, name, sources=[], **kwa)

class cmake_build_ext(build_ext):
    def run(self):
        self.build_temp = build_temp

        for ext in self.extensions:
            self.build_cmake(ext)
        self.copy_extensions_to_source()

    def build_cmake(self, ext):
        for ext in self.extensions:
            if not os.path.exists(self.build_temp):
                os.makedirs(self.build_temp)

            extdir = lib_dir
            self.build_lib = lib_dir

            cfg = '@CMAKE_BUILD_TYPE@'

            cmake_args = [
                f"-DCMAKE_BUILD_TYPE={cfg}",
                f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}",
                f"-DCMAKE_ARCHIVE_OUTPUT_DIRECTORY={self.build_temp}",
                f"-DCMAKE_RUNTIME_OUTPUT_DIRECTORY={extdir}",
                f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{cfg.upper()}={extdir}",
                f"-DCMAKE_ARCHIVE_OUTPUT_DIRECTORY_{cfg.upper()}={self.build_temp}",
                f"-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_{cfg.upper()}={extdir}",
                f"-DPYTHON_EXECUTABLE={sys.executable}"
            ]

            #self.spawn(['cmake', '-GNinja', '-H@CMAKE_SOURCE_DIR@', '-B@CMAKE_BINARY_DIR@'] + cmake_args)
            self.spawn(['cmake', '--build', self.build_temp, '--target', '@WHEEL_TARGET@'])

            for f in os.listdir(extdir):
                file_path = os.path.join(extdir, f)
                if platform.system() == 'Linux':
                    if f.endswith('.so'):
                        self.spawn(['patchelf', '--set-rpath', '$ORIGIN', file_path])
                elif platform.system() == 'Darwin':
                    if f.endswith('.dylib') or f.endswith('.so'):
                        otool_proc = subprocess.run(["otool", "-l", file_path], capture_output=True)
                        rpath_match = re.search(r"\n\s+path\s(.*)\s\(offset\s.*\n", otool_proc.stdout.decode())
                        if rpath_match:
                            rpath = rpath_match.group(1)
                            if rpath != "@loader_path":
                                print(f"Switching RPATH for {file_path}")
                                self.spawn(['install_name_tool', '-rpath', rpath, "@loader_path", file_path])
                        else:
                            print(f"Adding RPATH for {file_path}")
                            self.spawn(['install_name_tool', '-add_rpath', "@loader_path", file_path])

class bdist(_bdist):
    def finalize_options(self):
        _bdist.finalize_options(self)
        self.dist_dir = dist_dir
        self.bdist_base = lib_dir

class sdist(_sdist):
    def finalize_options(self):
        _sdist.finalize_options(self)
        self.dist_dir = dist_dir

class install_lib(_install_lib):
    def finalize_options(self):
        _install_lib.finalize_options(self)
        self.build_dir = lib_dir
 
setup(
    name = "@WHEEL_NAME@",
    version = "@WHEEL_VERSION@",
    description = "@WHEEL_DESCRIPTION@",
    author = "@WHEEL_AUTHOR@",
    url = "@WHEEL_URL@",

    ext_modules = [CMakeExtension("@WHEEL_NAME@")],
    keywords = "@WHEEL_NAME@",
    python_requires = "@WHEEL_PYTHON_REQUIRES@",
    install_requires = [
        @WHEEL_MODULE_DEPENDENCIES_PYLIST@
    ],

    cmdclass = {
        'bdist': bdist,
        'sdist': sdist,
        'install_lib': install_lib,
        'build_ext': cmake_build_ext,
    },
)
